// Code generated by sqlc. DO NOT EDIT.
// source: event.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createEvent = `-- name: CreateEvent :one
INSERT INTO event (
  id,
  name,
  description,
  start_date,
  end_date,
  prefix
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, name, description, start_date, end_date, prefix, created_at, updated_at
`

type CreateEventParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	StartDate   sql.NullTime   `json:"start_date"`
	EndDate     sql.NullTime   `json:"end_date"`
	Prefix      string         `json:"prefix"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRowContext(ctx, createEvent,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
		arg.Prefix,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Prefix,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, description, start_date, end_date, prefix, created_at, updated_at FROM event
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.StartDate,
		&i.EndDate,
		&i.Prefix,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEvent = `-- name: ListEvent :many
SELECT id, name, description, start_date, end_date, prefix, created_at, updated_at FROM event
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEventParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEvent(ctx context.Context, arg ListEventParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, listEvent, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
			&i.Prefix,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
