// Code generated by sqlc. DO NOT EDIT.
// source: customer.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customer (
  id,
  full_name,
  email,
  password,
  phone_number,
  confirmation_code,
  confirmation_time
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, full_name, email, password, phone_number, confirmation_code, confirmation_time, created_at, updated_at
`

type CreateCustomerParams struct {
	ID               uuid.UUID      `json:"id"`
	FullName         sql.NullString `json:"full_name"`
	Email            sql.NullString `json:"email"`
	Password         sql.NullString `json:"password"`
	PhoneNumber      sql.NullString `json:"phone_number"`
	ConfirmationCode sql.NullString `json:"confirmation_code"`
	ConfirmationTime sql.NullTime   `json:"confirmation_time"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.ID,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.ConfirmationCode,
		arg.ConfirmationTime,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.ConfirmationCode,
		&i.ConfirmationTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, full_name, email, password, phone_number, confirmation_code, confirmation_time, created_at, updated_at FROM customer
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id uuid.UUID) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.ConfirmationCode,
		&i.ConfirmationTime,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomer = `-- name: ListCustomer :many
SELECT id, full_name, email, password, phone_number, confirmation_code, confirmation_time, created_at, updated_at FROM customer
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCustomerParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomer(ctx context.Context, arg ListCustomerParams) ([]Customer, error) {
	rows, err := q.db.QueryContext(ctx, listCustomer, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.ConfirmationCode,
			&i.ConfirmationTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
