// Code generated by sqlc. DO NOT EDIT.
// source: ticket.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTicket = `-- name: CreateTicket :one
INSERT INTO ticket (
  id,
  serial_number,
  purchase_date,
  ticket_category_id
) VALUES (
  $1, $2, $3, $4
) RETURNING id, serial_number, purchase_date, created_at, updated_at, ticket_category_id
`

type CreateTicketParams struct {
	ID               uuid.UUID    `json:"id"`
	SerialNumber     string       `json:"serial_number"`
	PurchaseDate     sql.NullTime `json:"purchase_date"`
	TicketCategoryID uuid.UUID    `json:"ticket_category_id"`
}

func (q *Queries) CreateTicket(ctx context.Context, arg CreateTicketParams) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, createTicket,
		arg.ID,
		arg.SerialNumber,
		arg.PurchaseDate,
		arg.TicketCategoryID,
	)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.PurchaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TicketCategoryID,
	)
	return i, err
}

const getTicket = `-- name: GetTicket :one
SELECT id, serial_number, purchase_date, created_at, updated_at, ticket_category_id FROM ticket
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTicket(ctx context.Context, id uuid.UUID) (Ticket, error) {
	row := q.db.QueryRowContext(ctx, getTicket, id)
	var i Ticket
	err := row.Scan(
		&i.ID,
		&i.SerialNumber,
		&i.PurchaseDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TicketCategoryID,
	)
	return i, err
}

const listTicket = `-- name: ListTicket :many
SELECT id, serial_number, purchase_date, created_at, updated_at, ticket_category_id FROM ticket
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTicketParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTicket(ctx context.Context, arg ListTicketParams) ([]Ticket, error) {
	rows, err := q.db.QueryContext(ctx, listTicket, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Ticket{}
	for rows.Next() {
		var i Ticket
		if err := rows.Scan(
			&i.ID,
			&i.SerialNumber,
			&i.PurchaseDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TicketCategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
