// Code generated by sqlc. DO NOT EDIT.
// source: payment_option.sql

package db

import (
	"context"
)

const createPaymentOption = `-- name: CreatePaymentOption :one
INSERT INTO payment_option (
  name
) VALUES ($1) RETURNING id, name
`

func (q *Queries) CreatePaymentOption(ctx context.Context, name string) (PaymentOption, error) {
	row := q.db.QueryRowContext(ctx, createPaymentOption, name)
	var i PaymentOption
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPaymentOption = `-- name: GetPaymentOption :one
SELECT id, name FROM payment_option
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPaymentOption(ctx context.Context, id int32) (PaymentOption, error) {
	row := q.db.QueryRowContext(ctx, getPaymentOption, id)
	var i PaymentOption
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listPaymentOption = `-- name: ListPaymentOption :many
SELECT id, name FROM payment_option
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListPaymentOptionParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPaymentOption(ctx context.Context, arg ListPaymentOptionParams) ([]PaymentOption, error) {
	rows, err := q.db.QueryContext(ctx, listPaymentOption, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PaymentOption{}
	for rows.Next() {
		var i PaymentOption
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
