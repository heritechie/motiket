// Code generated by sqlc. DO NOT EDIT.
// source: customer_payment.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCustomerPayment = `-- name: CreateCustomerPayment :one
INSERT INTO customer_payment (
  id,
  status,
  success_at,
  failed_reason,
  customer_id,
  payment_option_id
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING id, status, success_at, failed_reason, created_at, updated_at, customer_id, payment_option_id
`

type CreateCustomerPaymentParams struct {
	ID              uuid.UUID      `json:"id"`
	Status          string         `json:"status"`
	SuccessAt       sql.NullTime   `json:"success_at"`
	FailedReason    sql.NullString `json:"failed_reason"`
	CustomerID      uuid.UUID      `json:"customer_id"`
	PaymentOptionID sql.NullInt32  `json:"payment_option_id"`
}

func (q *Queries) CreateCustomerPayment(ctx context.Context, arg CreateCustomerPaymentParams) (CustomerPayment, error) {
	row := q.db.QueryRowContext(ctx, createCustomerPayment,
		arg.ID,
		arg.Status,
		arg.SuccessAt,
		arg.FailedReason,
		arg.CustomerID,
		arg.PaymentOptionID,
	)
	var i CustomerPayment
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.SuccessAt,
		&i.FailedReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
		&i.PaymentOptionID,
	)
	return i, err
}

const getCustomerPayment = `-- name: GetCustomerPayment :one
SELECT id, status, success_at, failed_reason, created_at, updated_at, customer_id, payment_option_id FROM customer_payment
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomerPayment(ctx context.Context, id uuid.UUID) (CustomerPayment, error) {
	row := q.db.QueryRowContext(ctx, getCustomerPayment, id)
	var i CustomerPayment
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.SuccessAt,
		&i.FailedReason,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CustomerID,
		&i.PaymentOptionID,
	)
	return i, err
}

const listCustomerPayment = `-- name: ListCustomerPayment :many
SELECT id, status, success_at, failed_reason, created_at, updated_at, customer_id, payment_option_id FROM customer_payment
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCustomerPaymentParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomerPayment(ctx context.Context, arg ListCustomerPaymentParams) ([]CustomerPayment, error) {
	rows, err := q.db.QueryContext(ctx, listCustomerPayment, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerPayment{}
	for rows.Next() {
		var i CustomerPayment
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.SuccessAt,
			&i.FailedReason,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CustomerID,
			&i.PaymentOptionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
