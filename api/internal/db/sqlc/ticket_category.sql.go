// Code generated by sqlc. DO NOT EDIT.
// source: ticket_category.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTicketCategory = `-- name: CreateTicketCategory :one
INSERT INTO ticket_category (
  id,
  name,
  qty,
  price,
  start_date,
  end_date,
  prefix,
  area,
  event_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9
) RETURNING id, name, prefix, qty, price, start_date, end_date, created_at, updated_at, area, event_id
`

type CreateTicketCategoryParams struct {
	ID        uuid.UUID      `json:"id"`
	Name      string         `json:"name"`
	Qty       int64          `json:"qty"`
	Price     int64          `json:"price"`
	StartDate sql.NullTime   `json:"start_date"`
	EndDate   sql.NullTime   `json:"end_date"`
	Prefix    string         `json:"prefix"`
	Area      sql.NullString `json:"area"`
	EventID   uuid.UUID      `json:"event_id"`
}

func (q *Queries) CreateTicketCategory(ctx context.Context, arg CreateTicketCategoryParams) (TicketCategory, error) {
	row := q.db.QueryRowContext(ctx, createTicketCategory,
		arg.ID,
		arg.Name,
		arg.Qty,
		arg.Price,
		arg.StartDate,
		arg.EndDate,
		arg.Prefix,
		arg.Area,
		arg.EventID,
	)
	var i TicketCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Prefix,
		&i.Qty,
		&i.Price,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Area,
		&i.EventID,
	)
	return i, err
}

const getTicketCategory = `-- name: GetTicketCategory :one
SELECT id, name, prefix, qty, price, start_date, end_date, created_at, updated_at, area, event_id FROM ticket_category
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTicketCategory(ctx context.Context, id uuid.UUID) (TicketCategory, error) {
	row := q.db.QueryRowContext(ctx, getTicketCategory, id)
	var i TicketCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Prefix,
		&i.Qty,
		&i.Price,
		&i.StartDate,
		&i.EndDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Area,
		&i.EventID,
	)
	return i, err
}

const listTicketCategory = `-- name: ListTicketCategory :many
SELECT id, name, prefix, qty, price, start_date, end_date, created_at, updated_at, area, event_id FROM ticket_category
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListTicketCategoryParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTicketCategory(ctx context.Context, arg ListTicketCategoryParams) ([]TicketCategory, error) {
	rows, err := q.db.QueryContext(ctx, listTicketCategory, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TicketCategory{}
	for rows.Next() {
		var i TicketCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Prefix,
			&i.Qty,
			&i.Price,
			&i.StartDate,
			&i.EndDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Area,
			&i.EventID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
