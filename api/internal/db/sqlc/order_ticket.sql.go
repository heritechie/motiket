// Code generated by sqlc. DO NOT EDIT.
// source: order_ticket.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createOrderTicket = `-- name: CreateOrderTicket :one
INSERT INTO order_ticket (
  qty,
  ticket_id,
  customer_order_id
) VALUES (
  $1, $2, $3
) RETURNING qty, ticket_id, customer_order_id
`

type CreateOrderTicketParams struct {
	Qty             sql.NullInt32 `json:"qty"`
	TicketID        uuid.UUID     `json:"ticket_id"`
	CustomerOrderID uuid.UUID     `json:"customer_order_id"`
}

func (q *Queries) CreateOrderTicket(ctx context.Context, arg CreateOrderTicketParams) (OrderTicket, error) {
	row := q.db.QueryRowContext(ctx, createOrderTicket, arg.Qty, arg.TicketID, arg.CustomerOrderID)
	var i OrderTicket
	err := row.Scan(&i.Qty, &i.TicketID, &i.CustomerOrderID)
	return i, err
}

const listOrderTicketByCustomerOrderId = `-- name: ListOrderTicketByCustomerOrderId :many
SELECT 
  t.id, 
  t.serial_number, 
  COALESCE(t.purchase_date, now()) purchase_date,
  tc.name category_name
FROM order_ticket ot
INNER JOIN ticket t ON t.id = ot.ticket_id
INNER JOIN ticket_category tc ON tc.id = t.ticket_category_id
WHERE ot.customer_order_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListOrderTicketByCustomerOrderIdParams struct {
	CustomerOrderID uuid.UUID `json:"customer_order_id"`
	Limit           int32     `json:"limit"`
	Offset          int32     `json:"offset"`
}

type ListOrderTicketByCustomerOrderIdRow struct {
	ID           uuid.UUID `json:"id"`
	SerialNumber string    `json:"serial_number"`
	PurchaseDate time.Time `json:"purchase_date"`
	CategoryName string    `json:"category_name"`
}

func (q *Queries) ListOrderTicketByCustomerOrderId(ctx context.Context, arg ListOrderTicketByCustomerOrderIdParams) ([]ListOrderTicketByCustomerOrderIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listOrderTicketByCustomerOrderId, arg.CustomerOrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListOrderTicketByCustomerOrderIdRow{}
	for rows.Next() {
		var i ListOrderTicketByCustomerOrderIdRow
		if err := rows.Scan(
			&i.ID,
			&i.SerialNumber,
			&i.PurchaseDate,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
