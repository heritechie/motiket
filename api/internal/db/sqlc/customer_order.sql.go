// Code generated by sqlc. DO NOT EDIT.
// source: customer_order.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCustomerOrder = `-- name: CreateCustomerOrder :one
INSERT INTO customer_order (
  id,
  order_time,
  time_paid,
  total_price,
  discount,
  final_price,
  customer_id
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING id, order_time, time_paid, total_price, discount, final_price, customer_id, created_at, updated_at
`

type CreateCustomerOrderParams struct {
	ID         uuid.UUID     `json:"id"`
	OrderTime  time.Time     `json:"order_time"`
	TimePaid   sql.NullTime  `json:"time_paid"`
	TotalPrice int64         `json:"total_price"`
	Discount   sql.NullInt32 `json:"discount"`
	FinalPrice int64         `json:"final_price"`
	CustomerID uuid.UUID     `json:"customer_id"`
}

func (q *Queries) CreateCustomerOrder(ctx context.Context, arg CreateCustomerOrderParams) (CustomerOrder, error) {
	row := q.db.QueryRowContext(ctx, createCustomerOrder,
		arg.ID,
		arg.OrderTime,
		arg.TimePaid,
		arg.TotalPrice,
		arg.Discount,
		arg.FinalPrice,
		arg.CustomerID,
	)
	var i CustomerOrder
	err := row.Scan(
		&i.ID,
		&i.OrderTime,
		&i.TimePaid,
		&i.TotalPrice,
		&i.Discount,
		&i.FinalPrice,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerOrder = `-- name: GetCustomerOrder :one
SELECT id, order_time, time_paid, total_price, discount, final_price, customer_id, created_at, updated_at FROM customer_order
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomerOrder(ctx context.Context, id uuid.UUID) (CustomerOrder, error) {
	row := q.db.QueryRowContext(ctx, getCustomerOrder, id)
	var i CustomerOrder
	err := row.Scan(
		&i.ID,
		&i.OrderTime,
		&i.TimePaid,
		&i.TotalPrice,
		&i.Discount,
		&i.FinalPrice,
		&i.CustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCustomerOrder = `-- name: ListCustomerOrder :many
SELECT id, order_time, time_paid, total_price, discount, final_price, customer_id, created_at, updated_at FROM customer_order
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCustomerOrderParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomerOrder(ctx context.Context, arg ListCustomerOrderParams) ([]CustomerOrder, error) {
	rows, err := q.db.QueryContext(ctx, listCustomerOrder, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CustomerOrder{}
	for rows.Next() {
		var i CustomerOrder
		if err := rows.Scan(
			&i.ID,
			&i.OrderTime,
			&i.TimePaid,
			&i.TotalPrice,
			&i.Discount,
			&i.FinalPrice,
			&i.CustomerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
